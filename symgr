#!/usr/bin/env python3
import argparse
import logging
import sys
from pathlib import Path
from shutil import copy2

import symlink


log = logging.getLogger(__name__)


def bless(from_path, to_dir):
    to_path = to_dir / from_path.name
    copy2(from_path, to_path)
    symlink.link_file(to_path, from_path)


def main(args):
    """Link 'frm' to 'to'.

    Has DWIM behavior depending on what 'frm' and 'to' are:

    if 'frm' is a file and 'to' is a dir:
    - eg ~/.zshrc ~/setup/HOME
    - copy ~/.zshrc into ~/setup/HOME and symlink from ~/.zshrc into ...HOME
    - both frm and to must exist

    if 'frm' is a file and 'to' is a file:
    - eg. ~/bin/symgr ~/setup/HOME/bin/3rdparty/symgr/symgr
    - symlink 'frm' to 'to' (back up what's there, etc.)
    - to must exist, frm may not

    if 'frm' and 'to' are both dirs:
    - eg ~ ~/setup/HOME
    - link everything within them
    - strictly, to must exist, frm may not, but for this program both must exist

    if frm is a dir and to is a file:
    - makes no sense
    """
    frm = Path(args.frm)
    to = Path(args.to)

    if frm.is_file() and to.is_dir():
        log.info(f"Blessing file at {frm}. Moving to {to} and linking original path there.")
        return bless(frm, to)

    if frm.is_dir() and to.is_dir():
        log.info(f"Linking the files in {to} into {frm}")
        return symlink.link_directories(to, frm)

    if to.is_file():
        # if you got here, frm is either a file or doesn't exist, link frm to
        # 'to' and let the code rename 'to' if it exists
        log.info(f"Linking {frm} to {to}")
        return symlink.link_file(to, frm)

    log.error(f"Invalid arguments: from: {frm}, to: {to}. A required path may not exist.")
    return 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Symlink manager")
    parser.add_argument('frm', metavar='from', help="The directory in which to create links, or the file to bless")
    parser.add_argument('to', help='The directory the links point to, or the dest dir for the blessed file')
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debug logging')
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO)

    sys.exit(main(args))
